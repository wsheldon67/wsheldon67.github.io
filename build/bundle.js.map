{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Instructions.svelte","../../src/ignored_words.ts","../../src/get_word_list.ts","../../src/count_words.ts","../../src/state.ts","../../src/Puzzle.svelte","../../src/search.ts","../../src/puzzles.ts","../../src/Stats.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script lang='ts'>\r\n  export let show_intro:boolean\r\n\r\n  function hide_intro() {\r\n    show_intro = false\r\n    localStorage.setItem('is_subsequent_visit','true')\r\n  }\r\n</script>\r\n<style>\r\n  ul {\r\n    text-align: start;\r\n  }\r\n</style>\r\n<div class='win'>\r\n  <h2>Welcome to Wikiguessr!</h2>\r\n  <p>The object of the game is to guess the title of a Wikipedia article, based on the the words that appear the most frequently in it.</p>\r\n  <ul>\r\n    <li>Common filler words are removed.</li>\r\n    <li>You must reveal at least one word before each guess.</li>\r\n    <li>A new puzzle is released every day!</li>\r\n  </ul>\r\n  <button on:click={hide_intro}>Close this message</button>\r\n</div>","export const ignored_words = [\r\n    'the', 'to', 'a', 'and', 'in', 'of', 'are', 'or', 'is', 'for', 'be', 'on', 'was',\r\n    'with', 'by', 'as', 'at', 'it', 'has', 'an', 'has', 'its', 'from', 'but', 'have',\r\n    'that', 'can', 'also', 'this', 'were', 'had', 'which', 'would', 'after', 'year',\r\n    \"'s\",\r\n];\r\n","import { count_words } from './count_words';\r\nimport { ignored_words } from './ignored_words';\r\nexport function parse_text_to_words(text, title) {\r\n    let no_title;\r\n    title.split(' ').forEach((word) => {\r\n        const title_re = new RegExp(word, 'g');\r\n        no_title = text.replace(title_re, '');\r\n    });\r\n    const re_words = /(\\w|')+/g;\r\n    return no_title.match(re_words);\r\n}\r\nexport function get_word_list(page, answer_title, puzzle) {\r\n    const words = parse_text_to_words(page.extract, answer_title);\r\n    const word_counts = count_words(words);\r\n    //@ts-ignore\r\n    const word_counts_array = [...word_counts.entries()];\r\n    const filtered_words = word_counts_array.filter(el => ![...puzzle.answers, ...puzzle.remove, ...ignored_words].includes(el[0]));\r\n    const split_answer = puzzle.name.split('_');\r\n    const removed_answer = filtered_words.filter((el) => {\r\n        for (let word_in_answer of split_answer) {\r\n            if (word_in_answer.length < 4) {\r\n                continue;\r\n            }\r\n            const regex = new RegExp(`${word_in_answer.toLowerCase()}`);\r\n            if (regex.test(el[0])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n    let truncated;\r\n    if (removed_answer.length > 144) {\r\n        truncated = removed_answer.slice(0, 144);\r\n    }\r\n    else {\r\n        truncated = removed_answer;\r\n    }\r\n    truncated.sort((a, b) => b[1] - a[1]);\r\n    return truncated;\r\n}\r\n","export function count_words(words) {\r\n    return words.reduce((acc, e) => {\r\n        return acc.set(e.toLowerCase(), (acc.get(e.toLowerCase()) || 0) + 1);\r\n    }, new Map());\r\n}\r\n","const first_date = new Date('2022-05-15');\r\nexport const todays_puzzle = Math.floor((new Date().getTime() - first_date.getTime()) / (1000 * 60 * 60 * 24));\r\nexport function load_revealed_words() {\r\n    return get_json_storage('revealed_words', []);\r\n}\r\nexport function save_revealed_words(revealed_words) {\r\n    save_to_localStorage('revealed_words', JSON.stringify(revealed_words));\r\n}\r\nexport function load_turn_is_guess() {\r\n    return Boolean(localStorage.getItem('turn_is_guess'));\r\n}\r\nexport function save_turn_is_guess(turn_is_guess) {\r\n    if (turn_is_guess) {\r\n        save_to_localStorage('turn_is_guess', '1');\r\n    }\r\n    else {\r\n        localStorage.removeItem('turn_is_guess');\r\n    }\r\n}\r\nexport function load_completed_puzzles() {\r\n    const completed_puzzles = get_json_storage('completed_puzzles', []);\r\n    if (typeof (completed_puzzles[0]) === 'string') {\r\n        return [];\r\n    }\r\n    else {\r\n        return completed_puzzles;\r\n    }\r\n}\r\nexport function save_completed_puzzles(completed_puzzles) {\r\n    save_to_localStorage('completed_puzzles', JSON.stringify(completed_puzzles));\r\n}\r\nexport function load_current_puzzle() {\r\n    return get_json_storage('current_puzzle', todays_puzzle);\r\n}\r\nexport function save_current_puzzle(current_puzzle) {\r\n    save_to_localStorage('current_puzzle', current_puzzle.toString());\r\n}\r\nfunction save_to_localStorage(key, value) {\r\n    // TODO error handling for full localStorage\r\n    localStorage.setItem(key, value);\r\n}\r\nfunction get_json_storage(key, _default) {\r\n    if (localStorage.getItem(key)) {\r\n        return JSON.parse(localStorage.getItem(key));\r\n    }\r\n    else {\r\n        return _default;\r\n    }\r\n}\r\n","<script lang=\"ts\">\r\n  import { searchWikipedia } from './search'\r\n  import { get_word_list } from './get_word_list'\r\n  import { fake } from \"./fake\"\r\n  import type { IPuzzle } from './puzzles'\r\n  import { \r\n    CompletedPuzzle, save_completed_puzzles, \r\n    save_revealed_words, save_turn_is_guess \r\n  } from './state'\r\n\r\n  export let puzzle:IPuzzle\r\n  export let revealed_words:string[]\r\n  export let turn_is_guess:boolean\r\n  export let completed_puzzles:CompletedPuzzle[]\r\n  $: word_list_promise = get_page_data(puzzle.name)\r\n  let guess = ''\r\n  let answer_title = ''\r\n  let won = false\r\n  let wrong = false\r\n  $: placeholder = turn_is_guess ? 'Make a Guess' : 'Reveal a Word'\r\n  $: disabled = !turn_is_guess\r\n\r\n  async function get_page_data(article:string):Promise<[string, number][]> {\r\n    console.log('loading', article)\r\n    const page = await searchWikipedia(article)\r\n    answer_title = page.title\r\n    return get_word_list(page, answer_title, puzzle)\r\n  }\r\n\r\n  function reveal(word:string) {\r\n    revealed_words = [...revealed_words, word]\r\n    save_revealed_words(revealed_words)\r\n    turn_is_guess = true\r\n    save_turn_is_guess(turn_is_guess)\r\n  }\r\n  function check_answer() {\r\n    if (guess.toLowerCase() === answer_title.toLowerCase()) {\r\n      announce_win()\r\n    } else if (puzzle.answers.includes(guess.toLowerCase())) {\r\n      announce_win()\r\n    } else {\r\n      announce_wrong()\r\n    }\r\n  }\r\n  function announce_wrong() {\r\n    wrong = true\r\n    setTimeout(()=>{\r\n      guess = ''\r\n      turn_is_guess = false\r\n      wrong = false\r\n    }, 500)\r\n  }\r\n  function announce_win() {\r\n    won = true\r\n    completed_puzzles.push({\r\n      title: puzzle.name,\r\n      score: revealed_words.length\r\n    })\r\n    save_completed_puzzles(completed_puzzles)\r\n  }\r\n\r\n</script>\r\n<form class='guesser' on:submit|preventDefault={check_answer}>\r\n  <input type='text' {placeholder} {disabled} bind:value={guess} class:wrong={wrong}/>\r\n  <p>Words Revealed: {revealed_words.length}</p>\r\n</form>\r\n<div class='cont'>\r\n{#await word_list_promise}\r\n  Loading...\r\n{:then word_list} \r\n  {#each word_list as [word], index}\r\n  <p>{index+1}</p>\r\n  {#if revealed_words.includes(word)}\r\n    <p>{word}</p>\r\n  {:else}\r\n    <button on:click={()=>{reveal(word)}}>\r\n      Reveal\r\n    </button>\r\n  {/if}\r\n  {/each}\r\n{/await}\r\n</div>\r\n\r\n{#if won}\r\n<div class='win'>\r\n  <h1>Congratulations!</h1>\r\n  <p><a href={`https://en.wikipedia.org/wiki/${puzzle.name}`} target='_blank'>{answer_title}</a>\r\n  was the correct answer.</p>\r\n  <p>It took you {revealed_words.length} reveals to get the answer.</p>\r\n  <p><button on:click={()=>{won = false}}>\r\n    Close\r\n  </button></p>\r\n</div>\r\n{/if}","export async function searchWikipedia(title) {\r\n    const endpoint = `https://en.wikipedia.org/w/api.php?action=query&prop=extracts&titles=${title}&explaintext=1&formatversion=2&exsectionformat=plain&format=json&origin=*`;\r\n    const response = await fetch(endpoint);\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    const json = await response.json();\r\n    const page = json.query.pages[0];\r\n    return page;\r\n}\r\n","export const puzzles = [\r\n    { name: 'Pet_door', answers: [], remove: [] },\r\n    { name: 'Valencia', answers: [], remove: ['val', 'ncia', 'c', 'f', '1', '2'] },\r\n    { name: 'Adolf_Hitler', answers: [], remove: [] },\r\n    { name: 'Harry_Styles', answers: [], remove: [] },\r\n    { name: 'Donald_Trump', answers: [], remove: [] },\r\n    { name: 'Colorado', answers: [], remove: [] },\r\n    { name: 'Tornado', answers: ['tornadoes'], remove: ['tornado', 'tornadoes'] },\r\n    { name: 'Nebraska', answers: [], remove: [] },\r\n    { name: 'Yahtzee', answers: ['yatzee'], remove: [] },\r\n    { name: 'Joan_of_Arc', answers: [], remove: ['joan', \"joan's\"] },\r\n    { name: 'Turtle', answers: ['turtles'], remove: ['turtles', 'turtle'] },\r\n    { name: 'Ludwig_van_Beethoven', answers: ['beethoven'], remove: [] },\r\n    { name: 'Polio', answers: [], remove: ['polio', 'poliovirus'] },\r\n    { name: 'Africa', answers: [], remove: ['n', '000', '1'] },\r\n    { name: 'Whale_shark', answers: [], remove: ['whale', 's', 'm'] },\r\n    { name: 'SeaWorld', answers: ['sea world'], remove: ['sea', 'world'] },\r\n    { name: 'Chicken', answers: [], remove: ['s', 'chickens', 'chicken'] },\r\n    { name: 'Jupiter', answers: [], remove: ['000'] },\r\n    { name: 'Toast_(food)', answers: ['toast'], remove: [] },\r\n    { name: 'Monopoly_(game)', answers: ['monopoly'], remove: [] },\r\n    { name: 'SpongeBob_SquarePants', answers: ['spongebob', 'sponge bob'], remove: [] },\r\n    { name: 'First_Amendment_to_the_United_States_Constitution', answers: ['first amendment', '1st amendment'], remove: [] },\r\n    { name: 'Mary_Had_a_Little_Lamb', answers: ['mary had a little lamb'], remove: [] },\r\n    { name: 'Beyoncé', answers: ['beyonce'], remove: [] },\r\n    { name: 'Walt_Disney', answers: ['walt disney'], remove: [] },\r\n    { name: 'Spanish_Inquisition', answers: ['spanish inquisition'], remove: [] },\r\n    { name: 'Phil_McGraw', answers: ['dr phil', 'doctor phil'], remove: [] },\r\n    { name: 'A_Tale_of_Two_Cities', answers: ['a tale of two cities', 'tale of two cities'], remove: [] },\r\n    { name: 'Uptown_Funk', answers: ['uptown funk'], remove: [] },\r\n    { name: 'IPhone', answers: [], remove: [] },\r\n    { name: 'Bible', answers: ['the bible'], remove: [] },\r\n    { name: 'Stephen_Hawking', answers: [], remove: [] },\r\n    { name: 'Chernobyl_disaster', answers: ['chernobyl', 'chernoble', 'chernobel'], remove: [] },\r\n    { name: 'Mark_Zuckerberg', answers: [], remove: [] },\r\n    { name: 'Paris', answers: [], remove: [] },\r\n    { name: 'John Cena', answers: ['john sena'], remove: [] },\r\n    { name: 'Albert_Einstein', answers: ['einstein', 'einstien'], remove: [] },\r\n    { name: 'Darth_Vader', answers: ['lord vader'], remove: [] },\r\n    { name: 'Australia', answers: [], remove: [] },\r\n    { name: 'Top_Gun', answers: [], remove: [] },\r\n    { name: 'Penguin', answers: [], remove: [] },\r\n    { name: 'Bill_Gates', answers: [], remove: [] },\r\n    { name: 'Stranger_Things', answers: [], remove: [] },\r\n    { name: 'Wikipedia', answers: [], remove: [] },\r\n    { name: 'Elvis_Presley', answers: ['elvis'], remove: [] },\r\n    { name: 'Gmail', answers: [], remove: [] },\r\n    { name: 'Cat', answers: [], remove: [] },\r\n    { name: 'Netflix', answers: [], remove: [] },\r\n    { name: 'Mona_Lisa', answers: [], remove: [] },\r\n    { name: 'Theodore_Roosevelt', answers: ['teddy roosevelt'], remove: [] },\r\n    { name: 'Corvus', answers: ['crow'], remove: [] },\r\n    { name: 'Zendaya', answers: [], remove: [] },\r\n    { name: 'Nancy_Pelosi', answers: [], remove: [] },\r\n    { name: 'Minecraft', answers: [], remove: [] },\r\n    { name: 'Scientology', answers: [], remove: [] },\r\n    { name: 'Twitter', answers: [], remove: [] },\r\n    { name: 'New_Zealand', answers: [], remove: [] },\r\n    { name: 'Wordle', answers: [], remove: [] },\r\n    { name: 'Nicolas Cage', answers: ['nick cage', 'nicholas cage'], remove: [] },\r\n    { name: 'Avatar_(2009_film)', answers: ['avatar'], remove: [] },\r\n    { name: 'Twitch_(service)', answers: ['twitch'], remove: [] },\r\n    { name: 'Titanic', answers: ['the titanic'], remove: [] },\r\n    { name: 'Greek_alphabet', answers: ['greek letters'], remove: [] },\r\n    { name: 'NATO_phonetic_alphabet', answers: ['phonetic alphabet', 'nato alphabet'], remove: [] },\r\n];\r\nexport function get_puzzle(day) {\r\n    console.log(day);\r\n    return puzzles[day];\r\n}\r\n","<script lang='ts'>\r\n  import type { CompletedPuzzle } from \"./state\"\r\n\r\n  export let current_page\r\n\r\n  export let completed_puzzles:CompletedPuzzle[]\r\n  $: best_puzzle = completed_puzzles.sort((a,b) => a.score - b.score)[0]\r\n  $: average_score = get_average_score(completed_puzzles)\r\n  $: distribution = get_distribution(completed_puzzles)\r\n  $: most_common_score = distribution.sort((a,b) => b.count - a.count)[0]?.count\r\n\r\n  function get_average_score(puzzles:CompletedPuzzle[]):string {\r\n    const total = puzzles.reduce((prev, curr) => {\r\n      return prev + curr.score\r\n    },0)\r\n    const count = puzzles.length\r\n    return (total/count).toFixed(1)\r\n  }\r\n  interface Reveal_Count {reveals: number, count: number}\r\n  function get_distribution(puzzles:CompletedPuzzle[]):Reveal_Count[] {\r\n    const results:any = {}\r\n    puzzles.forEach(({score}) => {\r\n      if (typeof(results[score]) === 'undefined') {results[score] = 0}\r\n      results[score]++\r\n    })\r\n    const unsorted_array = []\r\n    for (let i in results) {\r\n      unsorted_array.push({reveals: Number(i), count: results[i]})\r\n    }\r\n    return unsorted_array\r\n  }\r\n</script>\r\n{JSON.stringify(distribution)}\r\n<button on:click={()=>{current_page='guess'}}>Back</button>\r\n<ul>\r\n  <li>Your best puzzle was <em>{best_puzzle?.title.replaceAll('_',' ')}</em> which you got in {best_puzzle?.score} reveals!</li>\r\n  <li>Your average score is {average_score} reveals.</li>\r\n</ul>\r\n<p>Distribution:</p>\r\n  {#each distribution.sort((a,b) => a.reveals - b.reveals) as {reveals, count}}\r\n    <div class='row'>\r\n      <p>{reveals}</p>\r\n      <p class='bar' style={`width: ${Math.floor((count/most_common_score)*100)}%`}>{count}</p>\r\n    </div>\r\n  {/each}\r\n<style>\r\n  .bar {\r\n    color: rgba(0,0,0,0);\r\n    text-align: right;\r\n    padding-right: 1em;\r\n  }\r\n  .bar:hover {\r\n    color: var(--text-color);\r\n  }\r\n  .row {\r\n    display: grid;\r\n    grid-template-columns: 2em auto;\r\n    width: 80vw;\r\n  }\r\n  .row:nth-child(2n) > .bar {\r\n    background-color: rgb(68, 102, 131);\r\n  }\r\n  .row:nth-child(2n+1) > .bar {\r\n    background-color: rgb(69, 43, 82);\r\n  }\r\n</style>","<script lang='ts'>\n  import Instructions from \"./Instructions.svelte\"\n  import Puzzle from \"./Puzzle.svelte\"\n  import { IPuzzle, get_puzzle, puzzles } from './puzzles'\n  import { \n    load_completed_puzzles, load_current_puzzle, \n    load_revealed_words, load_turn_is_guess, save_current_puzzle, \n    save_revealed_words, save_turn_is_guess, todays_puzzle \n  } from './state'\n  import Stats from \"./Stats.svelte\"\n\n  // state\n  let completed_puzzles = load_completed_puzzles()\n  let revealed_words = load_revealed_words()\n  let turn_is_guess = load_turn_is_guess()\n  let current_puzzle = load_current_puzzle()\n\n  let puzzle = get_puzzle(current_puzzle)\n  let current_page = already_completed(puzzle.name) ? 'change' : 'guess'\n  let available_puzzles = puzzles.slice(0, todays_puzzle+1)\n\n  let show_intro = true\n\n\nfunction change_puzzle(new_puzzle:IPuzzle, index: number) {\n  puzzle = new_puzzle\n  revealed_words = []\n  turn_is_guess = false\n  current_page = 'guess'\n  save_current_puzzle(index)\n  save_revealed_words(revealed_words)\n  save_turn_is_guess(turn_is_guess)\n}\nfunction already_completed(puzzle:string):boolean {\n  return completed_puzzles.some(el => el.title === puzzle)\n}\n//@ts-ignore\nwindow.change_puzzle = function (index) {\n  change_puzzle(puzzles[index], index)\n}\n\n//TODO refactor for readability - both components are long and hard to follow\n//TODO roadblock if someone clears all the words without guessing the answer.\n</script>\n{#if current_page === 'change'}\n{#each available_puzzles as puzzle_title, index}\n<button\n  on:click={()=>{change_puzzle(available_puzzles[available_puzzles.length - index - 1], available_puzzles.length - index - 1)}}\n  disabled={already_completed(available_puzzles[available_puzzles.length - index - 1].name)}\n>\n  {available_puzzles.length - index}\n</button>\n{/each}\n{:else if current_page === 'stats'}\n<Stats {completed_puzzles} bind:current_page={current_page}/>\n{:else}\n  <button on:click={()=>{current_page = 'change'}}>Change Puzzle</button>\n  {#if completed_puzzles.length > 0}\n    <button on:click={()=>{current_page = 'stats'}}>Show Stats</button>\n  {/if}\n  <Puzzle\n    {puzzle}\n    {revealed_words}\n    {turn_is_guess}\n    bind:completed_puzzles={completed_puzzles}\n  />\n{/if}\n{#if !localStorage.getItem('is_subsequent_visit') && show_intro}\n  <Instructions bind:show_intro={show_intro}/>\n{/if}","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body,\r\n    props: {}\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","toggle_class","toggle","classList","current_component","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","handle_promise","promise","info","token","type","index","key","resolved","child_ctx","undefined","slice","current","needs_flush","blocks","m","mount","then","error","catch","hasCatch","pending","bind","props","bound","create_component","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","make_dirty","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","indexOf","splice","$set","$$props","obj","$$set","keys","div","h2","ul","button","show_intro","$$invalidate","localStorage","setItem","ignored_words","get_word_list","page","answer_title","puzzle","words","title","no_title","split","word","title_re","RegExp","replace","match","parse_text_to_words","extract","word_counts","reduce","acc","e","set","toLowerCase","get","count_words","filtered_words","entries","el","answers","remove","includes","split_answer","removed_answer","word_in_answer","test","truncated","sort","first_date","Date","todays_puzzle","Math","floor","getTime","save_revealed_words","revealed_words","save_to_localStorage","JSON","stringify","save_turn_is_guess","turn_is_guess","removeItem","get_json_storage","_default","getItem","parse","t","t_value","t0_value","t6_value","a_href_value","h1","p0","p1","p2","t6","t2_value","create_if_block","form","preventDefault","call","t2","completed_puzzles","guess","won","wrong","async","get_page_data","article","console","log","endpoint","response","fetch","ok","statusText","json","query","pages","searchWikipedia","reveal","announce_win","score","save_completed_puzzles","word_list_promise","placeholder","disabled","setTimeout","puzzles","p1_style_value","t0","t5_value","replaceAll","t7_value","each_value","func","li0","em","li1","t5","t7","reveals","_a","current_page","best_puzzle","average_score","prev","curr","toFixed","get_average_score","distribution","results","unsorted_array","Number","count","get_distribution","most_common_score","create_if_block_3","show_if","load_completed_puzzles","Boolean","current_puzzle","day","already_completed","available_puzzles","change_puzzle","new_puzzle","toString","save_current_puzzle","some","window","body"],"mappings":"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"}