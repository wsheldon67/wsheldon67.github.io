{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/fake.ts","../../src/ignored_words.ts","../../src/state.ts","../../src/Puzzle.svelte","../../src/parse_text_to_words.ts","../../src/count_words.ts","../../src/puzzles.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","export const raw = {\r\n    \"batchcomplete\": true,\r\n    \"query\": {\r\n        \"normalized\": [\r\n            {\r\n                \"fromencoded\": false,\r\n                \"from\": \"Pet_door\",\r\n                \"to\": \"Pet door\"\r\n            }\r\n        ],\r\n        \"pages\": [\r\n            {\r\n                \"pageid\": 3276454,\r\n                \"ns\": 0,\r\n                \"title\": \"Pet door\",\r\n                \"extract\": \"A pet door or pet flap (also referred to in more specific terms, such as cat flap, cat door, dog door, or doggy door) is a small opening to allow pets to enter and exit a building on their own without needing a human to open the door.  Originally simple holes, the modern form is a hinged and often spring-loaded panel or flexible flap, and some are electronically controlled.  They offer a degree of protection against wind, rain, and larger-bodied intruders entering the dwelling. Similar hatches can let dogs through fences at stiles. A related concept is the pet gate, which is easy for humans to open but acts as a secure pet barrier.\\n\\n\\nPurpose\\nA pet door is found to be convenient by many owners of companion animals, especially dogs and cats, because it lets the pets come and go as they please, reducing the need for pet-owners to let or take the pet outside manually, and curtailing unwanted behaviour such as loud vocalisation to be let outside, scratching on doors or walls, and (especially in the case of dogs) excreting in the house. They also help to ensure that a pet left outdoors can safely get back into the house in the case of inclement weather.\\n\\n\\nFeatures\\n\\nThe simplest type are bottom-weighted flaps hung from the top of the opening, which swing shut on their own, but may be spring-aided to increase wind resistance. These flaps often feature magnets around the edges to help keep the door closed against weather and wind. Some pet doors have side-mounted hinges and swing open like saloon doors. These pet doors usually have a spring or other contrivance to force their closure after the pet has gone through. Instead of a rubber flap, saloon style doors are often made from plastic, acrylic, or plexiglass, and the panels are fitted with weather seal to help keep weather outside.\\nAnother common feature is an adjustable catch to restrict the opening of the device to either one direction or the other; for example, to allow the pet to come in for the night, but not go out again until the owner releases the catch the next morning. Some pets, mostly cats with their retractile claws and flexible paws, learn to circumvent one-way pet doors, especially the \\\"flap-within-flap\\\" design.\\nMost also have a locking mechanism of some kind, and can be closed off by sliding a rigid plate into parallel rails on the left and right of the interior side of the pet door, useful during bad weather or when the owners are traveling with their pets.\\nPet doors are generally designed to be safe for any type of pet.  The panels are often designed with soft vinyl that does not trap or injure the animal. Cheap, easily replaceable pet doors are made from plastic and may not always be robust enough for large, boisterous pets.\\nPet doors are most often fitted in a plywood or plastic paneled door, into which it is straightforward to cut a large round hole, but can also be fitted in brickwork or (if a sealed unit is obtained with the hole already provided) in a double glazed door.  The latter is a relatively expensive option but may be the only alternative in some cases. Removable pet doors suitable for sliding glass doors are also available.\\nInnovation has contributed to a new generation of more expensive pet doors making use of specific materials, automation, time control devices, and/or sophisticated sensors to deal with common problems like poor insulation and drafts, higher noise levels, insufficient pet safety and access difficulties.\\n\\n\\nHistory\\nThe Oxford English Dictionary records the first use of the phrase \\\"cat flap\\\" in 1957 and \\\"cat door\\\" in 1959, but the idea is much older.\\n\\nIn rural areas, cat doors (often simple holes) in the walls, doors or even roofs of grain and flour storage spaces have long been used to welcome feral cats to hunt rodent pests that feed on these stores. Human semi-domestication of wildcats dates back to at least 7,500 BC in Cyprus, and the domestic cat was a part of everyday life in grain-dependent ancient Egypt (ca. 6,000 BC onward).  In modern times, this function is mostly lost, but in some rural areas, such as Valencia, Spain, and Vaunage, France, farm cat doors and holes (Spanish: gateras, French: chatières) are still common.\\n\\nThe 14th-century English writer Geoffrey Chaucer described a simple cat hole in the \\\"Miller's Tale\\\" from his Canterbury Tales (late 14th century). In the narrative, a servant whose knocks go unanswered uses the cat door to peek in:An hole he foond, ful lowe upon a bordTher as the cat was wont in for to crepe,And at the hole he looked in ful depe,And at the last he hadde of hym a sighte.\\nIn an apparent early modern example of urban legend, the invention of the pet door was attributed to Isaac Newton (1642–1727) in a story (authored anonymously and published in a column of anecdotes in 1893) to the effect that Newton foolishly made a large hole for his adult cat and a small one for her kittens, not realizing the kittens could use the large hole as well. Two Newton biographers cite passages saying that Newton kept \\\"neither cat nor dog in his chamber\\\". Yet over 60 years earlier, a member of Newton's alma mater Trinity College, one J. M. F. Wright, reported this same story (from an unknown source) in his 1827 memoir, adding: \\\"Whether this account be true or false, indisputably true is it that there are in the door to this day two plugged holes of the proper dimensions for the respective egresses of cat and kitten.\\\"Modern cat flaps are popular in some countries, even in urban environments, particularly the United Kingdom where it is estimated that about 74% of cats have access to the outdoors.Dog doors are common in suburban North America, where they mostly lead to fenced-in yards.  Pet doors are also common between suburban homes and their attached garages, so that pet-related mess (cat box, dog food, etc.) can be kept in the garage with pets having free access.\\n\\n\\nElectronic pet doors\\n\\nSeveral types of pet doors that allow selective access are available. The advantages of this type of pet door over simpler models are improved weather resistance, and home security against strays and other unwanted animals. Some use a permanent magnet mounted on the pet's collar to activate a matching electromagnetic mechanism that unlatches the door panel when the magnet comes within range; several pets can be fitted with collars that match the same door. Pet doors with infrared locks open only when a collar-mounted device transmits the correct code to the latch's receiver, allowing owners to have multiple flaps that different pets can use, e.g. a small cat flap to the back yard and a large dog door accessing a dog run.  Either type can be used to selectively allow one pet outside access, while denying it to another (e.g., an ill animal that needs to stay indoors).\\nSome of the newest models use radio-frequency identification to electronically read a pet's microchip implant. This removes the need for a cat to wear a collar, which could become lost. Other high-end doors use a key with RFID. The key is attached to the pet's collar, and the electric door only opens for the assigned keys.\\n\\n\\nDog stiles\\n\\nIn England, Ireland, and other areas with large numbers of livestock fences and walls in areas through which people walk on footpaths, stiles often have wooden, lift-up dog hatchways next to them, because dogs are not good at climbing stile steps and are often too heavy to lift over a fence.\\n\\n\\nPet gates\\nA related idea to the pet door is the pet gate, an easily human-operated portal that keeps pets in (or out) and thwarts their attempts to open it by using a thumb-operated switch or a smooth door handle, and which is tall enough that it cannot be jumped over by the type of pet for which it was designed. Styles vary, but they are typically made of wooden or metal bars or a wire lattice, and have adjustable widths so that they can be used to span arbitrary entrances, hallways or windows. Common uses are to keep pets inside while ventilating a room by opening an unscreened door, or keeping pets out of a baby's room or a dining area.\\n\\n\\nPet barriers\\nPet barriers are typically made of fabric and are especially used to secure staircases. They are available in banister-to-banister and wall-to-banister options and are customizable and portable.\\n\\n\\nReferences\"\r\n            }\r\n        ]\r\n    }\r\n};\r\nexport const fake = raw.query.pages[0];\r\n","export const ignored_words = [\r\n    'the', 'to', 'a', 'and', 'in', 'of', 'are', 'or', 'is', 'for', 'be', 'on', 'was',\r\n    'with', 'by', 'as', 'at', 'it', 'has', 'an', 'has', 'its', 'from', 'but', 'have',\r\n    'that', 'can', 'also', 'this', 'were', 'had', 'which', 'would', 'after', 'year',\r\n    \"'s\",\r\n];\r\n","const first_date = new Date('2022-05-15');\r\nexport const todays_puzzle = Math.floor((new Date().getTime() - first_date.getTime()) / (1000 * 60 * 60 * 24));\r\nexport function load_revealed_words() {\r\n    return get_json_storage('revealed_words', []);\r\n}\r\nexport function save_revealed_words(revealed_words) {\r\n    save_to_localStorage('revealed_words', JSON.stringify(revealed_words));\r\n}\r\nexport function load_turn_is_guess() {\r\n    return Boolean(localStorage.getItem('turn_is_guess'));\r\n}\r\nexport function save_turn_is_guess(turn_is_guess) {\r\n    if (turn_is_guess) {\r\n        save_to_localStorage('turn_is_guess', '1');\r\n    }\r\n    else {\r\n        localStorage.removeItem('turn_is_guess');\r\n    }\r\n}\r\nexport function load_completed_puzzles() {\r\n    return get_json_storage('completed_puzzles', []);\r\n}\r\nexport function save_completed_puzzles(completed_puzzles) {\r\n    save_to_localStorage('completed_puzzles', JSON.stringify(completed_puzzles));\r\n}\r\nexport function load_current_puzzle() {\r\n    return get_json_storage('current_puzzle', todays_puzzle);\r\n}\r\nexport function save_current_puzzle(current_puzzle) {\r\n    save_to_localStorage('current_puzzle', current_puzzle.toString());\r\n}\r\nfunction save_to_localStorage(key, value) {\r\n    // TODO error handling for full localStorage\r\n    localStorage.setItem(key, value);\r\n}\r\nfunction get_json_storage(key, _default) {\r\n    if (localStorage.getItem(key)) {\r\n        return JSON.parse(localStorage.getItem(key));\r\n    }\r\n    else {\r\n        return _default;\r\n    }\r\n}\r\n","<script lang=\"ts\">\r\n  import { searchWikipedia } from './search'\r\n  import { parse_text_to_words } from './parse_text_to_words'\r\n  import { count_words } from './count_words'\r\n  import { fake } from \"./fake\"\r\n  import { ignored_words } from './ignored_words'\r\n  import type { IPuzzle } from './puzzles'\r\n  import { \r\n    CompletedPuzzle, save_completed_puzzles, \r\n    save_revealed_words, save_turn_is_guess \r\n  } from './state'\r\n\r\n  export let puzzle:IPuzzle\r\n  export let revealed_words:string[]\r\n  export let turn_is_guess:boolean\r\n  export let completed_puzzles:CompletedPuzzle[]\r\n  $: word_list_promise = get_word_list(puzzle.name)\r\n  let guess = ''\r\n  let answer_title = ''\r\n  let won = false\r\n  let wrong = false\r\n  $: placeholder = turn_is_guess ? 'Make a Guess' : 'Reveal a Word'\r\n  $: disabled = !turn_is_guess\r\n\r\n  async function get_word_list(article:string):Promise<[string, number][]> {\r\n    console.log('loading', article)\r\n    const page = fake//await searchWikipedia(article)\r\n    answer_title = page.title\r\n    const words = parse_text_to_words(page.extract, answer_title)\r\n    const word_counts = count_words(words)\r\n    const word_counts_array = [...word_counts.entries()]\r\n    const filtered_words = word_counts_array.filter(el => ![...puzzle.answers,...puzzle.remove,...ignored_words].includes(el[0]))\r\n    let truncated\r\n    if (word_counts_array.length > 500) {\r\n      truncated = filtered_words.slice(0, 500)\r\n    } else {\r\n      truncated = filtered_words\r\n    }\r\n    truncated.sort((a,b) => b[1] - a[1])\r\n    return truncated\r\n  }\r\n\r\n  function reveal(word:string) {\r\n    revealed_words = [...revealed_words, word]\r\n    save_revealed_words(revealed_words)\r\n    turn_is_guess = true\r\n    save_turn_is_guess(turn_is_guess)\r\n  }\r\n  function check_answer() {\r\n    if (guess.toLowerCase() === answer_title.toLowerCase()) {\r\n      announce_win()\r\n    } else if (puzzle.answers.includes(guess.toLowerCase())) {\r\n      announce_win()\r\n    } else {\r\n      announce_wrong()\r\n    }\r\n  }\r\n  function announce_wrong() {\r\n    wrong = true\r\n    setTimeout(()=>{\r\n      guess = ''\r\n      turn_is_guess = false\r\n      wrong = false\r\n    }, 500)\r\n  }\r\n  function announce_win() {\r\n    won = true\r\n    completed_puzzles.push({\r\n      title: puzzle.name,\r\n      score: revealed_words.length\r\n    })\r\n    save_completed_puzzles(completed_puzzles)\r\n  }\r\n\r\n</script>\r\n<form class='guesser' on:submit|preventDefault={check_answer}>\r\n  <input type='text' {placeholder} {disabled} bind:value={guess} class:wrong={wrong}/>\r\n  <p>Words Revealed: {revealed_words.length}</p>\r\n</form>\r\n<div class='cont'>\r\n{#await word_list_promise}\r\n  Loading...\r\n{:then word_list} \r\n  {#each word_list as [word], index}\r\n  <p>{index+1}</p>\r\n  {#if revealed_words.includes(word)}\r\n    <p>{word}</p>\r\n  {:else}\r\n    <button on:click={()=>{reveal(word)}}>\r\n      Reveal\r\n    </button>\r\n  {/if}\r\n  {/each}\r\n{/await}\r\n</div>\r\n\r\n{#if won}\r\n<div class='win'>\r\n  <h1>Congratulations!</h1>\r\n  <p><a href={`https://en.wikipedia.org/wiki/${puzzle.name}`} target='_blank'>{answer_title}</a>\r\n  was the correct answer.</p>\r\n  <p>It took you {revealed_words.length} reveals to get the answer.</p>\r\n  <p><button on:click={()=>{won = false}}>\r\n    Close\r\n  </button></p>\r\n</div>\r\n{/if}","export function parse_text_to_words(text, title) {\r\n    let no_title;\r\n    title.split(' ').forEach((word) => {\r\n        const title_re = new RegExp(word, 'g');\r\n        no_title = text.replace(title_re, '');\r\n    });\r\n    const re_words = /(\\w|')+/g;\r\n    return no_title.match(re_words);\r\n}\r\n","export function count_words(words) {\r\n    return words.reduce((acc, e) => {\r\n        return acc.set(e.toLowerCase(), (acc.get(e.toLowerCase()) || 0) + 1);\r\n    }, new Map());\r\n}\r\n","export const puzzles = [\r\n    { name: 'Pet_door', answers: [], remove: [] },\r\n    { name: 'Valencia', answers: [], remove: ['val', 'ncia', 'c', 'f', '1', '2'] },\r\n    { name: 'Adolf_Hitler', answers: [], remove: [] },\r\n    { name: 'Harry_Styles', answers: [], remove: [] },\r\n    { name: 'Donald_Trump', answers: [], remove: [] },\r\n    { name: 'Colorado', answers: [], remove: [] },\r\n    { name: 'Tornado', answers: [], remove: [] },\r\n    { name: 'Nebraska', answers: [], remove: [] },\r\n    { name: 'Yahtzee', answers: ['yatzee'], remove: [] },\r\n    { name: 'Joan_of_Arc', answers: [], remove: ['joan', \"joan's\"] },\r\n    { name: 'Turtle', answers: [], remove: ['turtles', 'turtle'] },\r\n    { name: 'Ludwig_van_Beethoven', answers: ['beethoven'], remove: [] },\r\n    { name: 'Polio', answers: [], remove: ['polio', 'poliovirus'] },\r\n    { name: 'Africa', answers: [], remove: ['n', '000', '1'] },\r\n    { name: 'Whale_shark', answers: [], remove: ['whale', 's', 'm'] },\r\n    { name: 'SeaWorld', answers: ['sea world'], remove: ['sea', 'world'] },\r\n    { name: 'Chicken', answers: [], remove: ['s', 'chickens', 'chicken'] },\r\n    { name: 'Jupiter', answers: [], remove: ['000'] },\r\n];\r\nexport function get_puzzle(day) {\r\n    console.log(day);\r\n    return puzzles[day];\r\n}\r\n","<script lang='ts'>\n  import Puzzle from \"./Puzzle.svelte\"\n  import { IPuzzle, get_puzzle, puzzles } from './puzzles'\n  import { \n    load_completed_puzzles, load_current_puzzle, \n    load_revealed_words, load_turn_is_guess, save_current_puzzle, \n    save_revealed_words, save_turn_is_guess, todays_puzzle \n  } from './state'\n\n  // state\n  let completed_puzzles = load_completed_puzzles()\n  let revealed_words = load_revealed_words()\n  let turn_is_guess = load_turn_is_guess()\n  let current_puzzle = load_current_puzzle()\n\n  let show_puzzle_picker = false\n\n  let puzzle = get_puzzle(current_puzzle)\n  let available_puzzles = puzzles.slice(0, todays_puzzle+1)\n\n\nfunction change_puzzle(new_puzzle:IPuzzle, index: number) {\n  puzzle = new_puzzle\n  revealed_words = []\n  turn_is_guess = false\n  show_puzzle_picker = false\n  save_current_puzzle(index)\n  save_revealed_words(revealed_words)\n  save_turn_is_guess(turn_is_guess)\n}\nfunction already_completed(puzzle:string):boolean {\n  return completed_puzzles.some(el => el.title === puzzle)\n}\n//@ts-ignore\nwindow.change_puzzle = function (index) {\n  change_puzzle(puzzles[index], index)\n}\n\n//TODO refactor for readability - both components are long and hard to follow\n\n</script>\n{#if show_puzzle_picker}\n{#each available_puzzles as puzzle_title, index}\n<button\n  on:click={()=>{change_puzzle(available_puzzles[available_puzzles.length - index - 1], available_puzzles.length - index - 1)}}\n  class:completed={already_completed(available_puzzles[available_puzzles.length - index - 1].name)}\n>\n  {available_puzzles.length - index}\n</button>\n{/each}\n{:else}\n  <button on:click={()=>{show_puzzle_picker = true}}>Change Puzzle</button>\n  <Puzzle\n    {puzzle}\n    {revealed_words}\n    {turn_is_guess}\n    bind:completed_puzzles={completed_puzzles}\n  />\n{/if}","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body,\r\n    props: {}\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","toggle_class","toggle","classList","current_component","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","handle_promise","promise","info","token","type","index","key","resolved","child_ctx","undefined","slice","current","needs_flush","blocks","m","mount","then","error","catch","hasCatch","pending","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","make_dirty","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","indexOf","splice","$set","$$props","obj","$$set","keys","fake","pageid","ns","title","extract","ignored_words","first_date","Date","todays_puzzle","Math","floor","getTime","save_revealed_words","revealed_words","save_to_localStorage","JSON","stringify","save_turn_is_guess","turn_is_guess","localStorage","removeItem","setItem","get_json_storage","_default","getItem","parse","button","t","t_value","t0_value","includes","t6_value","a_href_value","div","h1","p0","p1","p2","t6","t2_value","create_if_block","form","preventDefault","call","t2","puzzle","completed_puzzles","guess","answer_title","won","wrong","async","get_word_list","article","console","log","page","words","no_title","split","word","title_re","RegExp","replace","match","parse_text_to_words","word_counts","reduce","acc","e","set","toLowerCase","get","count_words","word_counts_array","entries","filtered_words","el","answers","remove","truncated","sort","reveal","$$invalidate","announce_win","score","save_completed_puzzles","word_list_promise","placeholder","disabled","setTimeout","puzzles","Boolean","current_puzzle","show_puzzle_picker","day","available_puzzles","change_puzzle","new_puzzle","toString","save_current_puzzle","window","some","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAsRhF,SAASE,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAEhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,GAAK,EACpCF,EAAWE,IACXF,EAAWE,GAAGE,EAAEH,GAG5B,SAASI,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAoBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAEhB,SAASI,IACL,OAAOJ,EAAK,IAEhB,SAASK,EAAOvB,EAAMwB,EAAOC,EAASC,GAElC,OADA1B,EAAK2B,iBAAiBH,EAAOC,EAASC,GAC/B,IAAM1B,EAAK4B,oBAAoBJ,EAAOC,EAASC,GA8B1D,SAASG,EAAK7B,EAAM8B,EAAWC,GACd,MAATA,EACA/B,EAAKgC,gBAAgBF,GAChB9B,EAAKiC,aAAaH,KAAeC,GACtC/B,EAAKkC,aAAaJ,EAAWC,GAqLrC,SAASI,EAASjB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKkB,YAAcjB,IACnBD,EAAKC,KAAOA,GAEpB,SAASkB,EAAgBC,EAAOP,GAC5BO,EAAMP,MAAiB,MAATA,EAAgB,GAAKA,EA8FvC,SAASQ,EAAazB,EAASC,EAAMyB,GACjC1B,EAAQ2B,UAAUD,EAAS,MAAQ,UAAUzB,GA0NjD,IAAI2B,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,EAExB,SAASC,IACL,IAAKH,EACD,MAAM,IAAII,MAAM,oDACpB,OAAOJ,EAsDX,MAAMK,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoBrE,GACzB+D,EAAiBO,KAAKtE,GAuB1B,MAAMuE,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkBnB,EACxB,EAAG,CAGC,KAAOiB,EAAWZ,EAAiBnC,QAAQ,CACvC,MAAMgC,EAAYG,EAAiBY,GACnCA,IACAhB,EAAsBC,GACtBkB,EAAOlB,EAAUmB,IAKrB,IAHApB,EAAsB,MACtBI,EAAiBnC,OAAS,EAC1B+C,EAAW,EACJX,EAAkBpC,QACrBoC,EAAkBgB,KAAlBhB,GAIJ,IAAK,IAAIrC,EAAI,EAAGA,EAAIsC,EAAiBrC,OAAQD,GAAK,EAAG,CACjD,MAAMsD,EAAWhB,EAAiBtC,GAC7B8C,EAAeS,IAAID,KAEpBR,EAAeU,IAAIF,GACnBA,KAGRhB,EAAiBrC,OAAS,QACrBmC,EAAiBnC,QAC1B,KAAOsC,EAAgBtC,QACnBsC,EAAgBc,KAAhBd,GAEJI,GAAmB,EACnBG,EAAeW,QACfzB,EAAsBkB,GAE1B,SAASC,EAAOC,GACZ,GAAoB,OAAhBA,EAAGM,SAAmB,CACtBN,EAAGD,SACHxE,EAAQyE,EAAGO,eACX,MAAMC,EAAQR,EAAGQ,MACjBR,EAAGQ,MAAQ,EAAE,GACbR,EAAGM,UAAYN,EAAGM,SAASG,EAAET,EAAGU,IAAKF,GACrCR,EAAGW,aAAalF,QAAQ+D,IAiBhC,MAAMoB,EAAW,IAAIjB,IACrB,IAAIkB,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACHP,EAAGI,GAGX,SAASI,IACAJ,EAAOE,GACRxF,EAAQsF,EAAOG,GAEnBH,EAASA,EAAOJ,EAEpB,SAASS,EAAcC,EAAOC,GACtBD,GAASA,EAAMvE,IACfgE,EAASS,OAAOF,GAChBA,EAAMvE,EAAEwE,IAGhB,SAASE,EAAeH,EAAOC,EAAO9E,EAAQ4D,GAC1C,GAAIiB,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAAST,IAAIgB,GACb,OACJP,EAASR,IAAIe,GACbN,EAAOG,EAAEvB,MAAK,KACVmB,EAASS,OAAOF,GACZjB,IACI5D,GACA6E,EAAMrE,EAAE,GACZoD,QAGRiB,EAAMI,EAAEH,IAqOhB,SAASI,EAAeC,EAASC,GAC7B,MAAMC,EAAQD,EAAKC,MAAQ,GAC3B,SAAS5B,EAAO6B,EAAMC,EAAOC,EAAK9D,GAC9B,GAAI0D,EAAKC,QAAUA,EACf,OACJD,EAAKK,SAAW/D,EAChB,IAAIgE,EAAYN,EAAKhB,SACTuB,IAARH,IACAE,EAAYA,EAAUE,QACtBF,EAAUF,GAAO9D,GAErB,MAAMmD,EAAQS,IAASF,EAAKS,QAAUP,GAAMI,GAC5C,IAAII,GAAc,EACdV,EAAKP,QACDO,EAAKW,OACLX,EAAKW,OAAO5G,SAAQ,CAAC0F,EAAOvE,KACpBA,IAAMiF,GAASV,IACfL,IACAQ,EAAeH,EAAO,EAAG,GAAG,KACpBO,EAAKW,OAAOzF,KAAOuE,IACnBO,EAAKW,OAAOzF,GAAK,SAGzBqE,QAKRS,EAAKP,MAAMrE,EAAE,GAEjBqE,EAAMH,IACNE,EAAcC,EAAO,GACrBA,EAAMmB,EAAEZ,EAAKa,QAASb,EAAKtF,QAC3BgG,GAAc,GAElBV,EAAKP,MAAQA,EACTO,EAAKW,SACLX,EAAKW,OAAOR,GAASV,GACrBiB,GACAvC,IAGR,IA/3CgB7B,EA+3CDyD,IA93CkB,iBAAVzD,GAA4C,mBAAfA,EAAMwE,KA83CjC,CACrB,MAAM7D,EAAoBG,IAc1B,GAbA2C,EAAQe,MAAKxE,IACTY,EAAsBD,GACtBoB,EAAO2B,EAAKc,KAAM,EAAGd,EAAK1D,MAAOA,GACjCY,EAAsB,SACvB6D,IAIC,GAHA7D,EAAsBD,GACtBoB,EAAO2B,EAAKgB,MAAO,EAAGhB,EAAKe,MAAOA,GAClC7D,EAAsB,OACjB8C,EAAKiB,SACN,MAAMF,KAIVf,EAAKS,UAAYT,EAAKkB,QAEtB,OADA7C,EAAO2B,EAAKkB,QAAS,IACd,MAGV,CACD,GAAIlB,EAAKS,UAAYT,EAAKc,KAEtB,OADAzC,EAAO2B,EAAKc,KAAM,EAAGd,EAAK1D,MAAOyD,IAC1B,EAEXC,EAAKK,SAAWN,EAx5CxB,IAAoBzD,EAywDpB,SAAS6E,EAAgBhE,EAAW7C,EAAQI,EAAQ0G,GAChD,MAAMxC,SAAEA,EAAQyC,SAAEA,EAAQC,WAAEA,EAAUrC,aAAEA,GAAiB9B,EAAUmB,GACnEM,GAAYA,EAASgC,EAAEtG,EAAQI,GAC1B0G,GAEDtD,GAAoB,KAChB,MAAMyD,EAAiBF,EAASG,IAAIhI,GAAKiI,OAAOzH,GAC5CsH,EACAA,EAAWvD,QAAQwD,GAKnB1H,EAAQ0H,GAEZpE,EAAUmB,GAAG+C,SAAW,MAGhCpC,EAAalF,QAAQ+D,GAEzB,SAAS4D,EAAkBvE,EAAWlC,GAClC,MAAMqD,EAAKnB,EAAUmB,GACD,OAAhBA,EAAGM,WACH/E,EAAQyE,EAAGgD,YACXhD,EAAGM,UAAYN,EAAGM,SAASxD,EAAEH,GAG7BqD,EAAGgD,WAAahD,EAAGM,SAAW,KAC9BN,EAAGU,IAAM,IAGjB,SAAS2C,EAAWxE,EAAWjC,IACI,IAA3BiC,EAAUmB,GAAGQ,MAAM,KACnBxB,EAAiBS,KAAKZ,GA3zBrBU,IACDA,GAAmB,EACnBH,EAAiBoD,KAAK3C,IA2zBtBhB,EAAUmB,GAAGQ,MAAM8C,KAAK,IAE5BzE,EAAUmB,GAAGQ,MAAO5D,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAAS2G,EAAK1E,EAAWlB,EAAS6F,EAAUC,EAAiBC,EAAWC,EAAOC,EAAepD,EAAQ,EAAE,IACpG,MAAMqD,EAAmBlF,EACzBC,EAAsBC,GACtB,MAAMmB,EAAKnB,EAAUmB,GAAK,CACtBM,SAAU,KACVI,IAAK,KAELiD,MAAAA,EACA5D,OAAQ9E,EACRyI,UAAAA,EACAI,MAAO1I,IAEP2H,SAAU,GACVC,WAAY,GACZe,cAAe,GACfxD,cAAe,GACfI,aAAc,GACdqD,QAAS,IAAIC,IAAItG,EAAQqG,UAAYH,EAAmBA,EAAiB7D,GAAGgE,QAAU,KAEtFE,UAAW9I,IACXoF,MAAAA,EACA2D,YAAY,EACZC,KAAMzG,EAAQ3B,QAAU6H,EAAiB7D,GAAGoE,MAEhDR,GAAiBA,EAAc5D,EAAGoE,MAClC,IAAIC,GAAQ,EAkBZ,GAjBArE,EAAGU,IAAM8C,EACHA,EAAS3E,EAAWlB,EAAQgG,OAAS,IAAI,CAAC/G,EAAG0H,KAAQC,KACnD,MAAMvG,EAAQuG,EAAK1H,OAAS0H,EAAK,GAAKD,EAOtC,OANItE,EAAGU,KAAOgD,EAAU1D,EAAGU,IAAI9D,GAAIoD,EAAGU,IAAI9D,GAAKoB,MACtCgC,EAAGmE,YAAcnE,EAAG8D,MAAMlH,IAC3BoD,EAAG8D,MAAMlH,GAAGoB,GACZqG,GACAhB,EAAWxE,EAAWjC,IAEvB0H,KAET,GACNtE,EAAGD,SACHsE,GAAQ,EACR9I,EAAQyE,EAAGO,eAEXP,EAAGM,WAAWmD,GAAkBA,EAAgBzD,EAAGU,KAC/C/C,EAAQ3B,OAAQ,CAChB,GAAI2B,EAAQ6G,QAAS,CAEjB,MAAMC,EA52ClB,SAAkB1H,GACd,OAAO2H,MAAMC,KAAK5H,EAAQ6H,YA22CJC,CAASlH,EAAQ3B,QAE/BgE,EAAGM,UAAYN,EAAGM,SAASwE,EAAEL,GAC7BA,EAAMhJ,QAAQa,QAId0D,EAAGM,UAAYN,EAAGM,SAASU,IAE3BrD,EAAQoH,OACR7D,EAAcrC,EAAUmB,GAAGM,UAC/BuC,EAAgBhE,EAAWlB,EAAQ3B,OAAQ2B,EAAQvB,OAAQuB,EAAQmF,eAEnEjD,IAEJjB,EAAsBiF,GAkD1B,MAAMmB,EACFC,WACI7B,EAAkB8B,KAAM,GACxBA,KAAKD,SAAWhK,EAEpBkK,IAAIvD,EAAM1B,GACN,MAAMgE,EAAagB,KAAKlF,GAAGkE,UAAUtC,KAAUsD,KAAKlF,GAAGkE,UAAUtC,GAAQ,IAEzE,OADAsC,EAAUzE,KAAKS,GACR,KACH,MAAM2B,EAAQqC,EAAUkB,QAAQlF,IACjB,IAAX2B,GACAqC,EAAUmB,OAAOxD,EAAO,IAGpCyD,KAAKC,GA34DT,IAAkBC,EA44DNN,KAAKO,QA54DCD,EA44DkBD,EA34DG,IAA5BlK,OAAOqK,KAAKF,GAAK3I,UA44DhBqI,KAAKlF,GAAGmE,YAAa,EACrBe,KAAKO,MAAMF,GACXL,KAAKlF,GAAGmE,YAAa,ICz7D1B,MAoBMwB,EATD,CACIC,OAAU,QACVC,GAAM,EACNC,MAAS,WACTC,QAAW,6pQCfdC,EAAgB,CACzB,MAAO,KAAM,IAAK,MAAO,KAAM,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,KAAM,MAC3E,OAAQ,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,OAAQ,MAAO,OAC1E,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,MAAO,QAAS,QAAS,QAAS,OACzE,MCJEC,EAAa,IAAIC,KAAK,cACfC,EAAgBC,KAAKC,QAAO,IAAIH,MAAOI,UAAYL,EAAWK,WAAc,OAIlF,SAASC,EAAoBC,GAChCC,EAAqB,iBAAkBC,KAAKC,UAAUH,IAKnD,SAASI,EAAmBC,GAC3BA,EACAJ,EAAqB,gBAAiB,KAGtCK,aAAaC,WAAW,iBAehC,SAASN,EAAqB3E,EAAK9D,GAE/B8I,aAAaE,QAAQlF,EAAK9D,GAE9B,SAASiJ,EAAiBnF,EAAKoF,GAC3B,OAAIJ,aAAaK,QAAQrF,GACd4E,KAAKU,MAAMN,aAAaK,QAAQrF,IAGhCoF,mIC2CNxG,EAAS,yBAAd7D,OAAID,GAAA,iKAAC8D,EAAS,YAAd7D,OAAID,GAAA,EAAA,0HAAJC,yJAKAV,EAESH,EAAAqL,EAAAjL,4FAJLsE,EAAI,IAAA,sCAARvE,EAAaH,EAAAyE,EAAArE,gCAATsE,EAAI,IAAA,KAAAtC,EAAAkJ,EAAAC,gDAFNC,EAAA9G,MAAM,EAAC,wDACNA,EAAc,GAAC+G,SAAS/G,EAAI,wFADjCvE,EAAgBH,EAAAyE,EAAArE,kMAJQ,0GAqBRsL,EAAAhH,KAAe7D,OAAM,gGAFwC6D,EAAY,QAAK,oDAE3F,2BAAmC,kFAFO5C,EAAAjC,EAAA,OAAA8L,EAAA,iCAAAjH,KAAO1D,0DAFtDb,EAQMH,EAAA4L,EAAAxL,GAPJL,EAAyB6L,EAAAC,UACzB9L,EAC2B6L,EAAAE,GADxB/L,EAA2F+L,EAAAjM,wBAE9FE,EAAqE6L,EAAAG,+BACrEhM,EAEa6L,EAAAI,GAFVjM,EAEMiM,EAAAX,mDALoE3G,EAAY,IAA5C,EAAAF,GAAAmH,KAAAA,EAAA,iCAAAjH,KAAO1D,uBAEpC,EAAAwD,GAAAkH,KAAAA,EAAAhH,KAAe7D,OAAM,KAAAuB,EAAA6J,EAAAP,yEAxBjBQ,EAAAxH,KAAe7D,OAAM,0FAGnC6D,EAAiB,GAAAgB,SAgBpBhB,EAAG,IAAAyH,GAAAzH,0DAnBH,oJADyEA,EAAK,uDJkVnF,IAAyBvF,EInVzBgB,EAGOH,EAAAoM,EAAAhM,GAFLL,EAAoFqM,EAAA7J,OAA5BmC,EAAK,WAC7D3E,EAA8CqM,EAAA3H,0BAEhDtE,EAeMH,EAAA4L,EAAAxL,gIJgUmBjB,EInVuBuF,EAAY,IJoVjD,SAAUjD,GAGb,OAFAA,EAAM4K,iBAEClN,EAAGmN,KAAKpD,KAAMzH,iGItV6BiD,EAAK,QAALA,EAAK,sBAAeA,EAAK,IAC7D,EAAAF,GAAA0H,KAAAA,EAAAxH,KAAe7D,OAAM,KAAAuB,EAAAmK,EAAAL,yBAGnCxH,EAAiB,KAAAc,EAAAC,EAAAC,IJm1CzB,SAAmCA,EAAMhB,EAAKF,GAC1C,MAAMwB,EAAYtB,EAAIwB,SAChBH,SAAEA,GAAaL,EACjBA,EAAKS,UAAYT,EAAKc,OACtBR,EAAUN,EAAK1D,OAAS+D,GAExBL,EAAKS,UAAYT,EAAKgB,QACtBV,EAAUN,EAAKe,OAASV,GAE5BL,EAAKP,MAAMV,EAAEuB,EAAWxB,WI50CvBE,EAAG,sNApFK8H,GAAcjD,kBACdiB,GAAuBjB,iBACvBsB,GAAqBtB,qBACrBkD,GAAmClD,EAE1CmD,EAAQ,GACRC,EAAe,GACfC,GAAM,EACNC,GAAQ,EAIGC,eAAAC,EAAcC,GAC3BC,QAAQC,IAAI,UAAWF,GACjB,MAAAG,EAAOxD,MACbgD,EAAeQ,EAAKrD,OACd,MAAAsD,EC5BH,SAA6BjM,EAAM2I,GACtC,IAAIuD,EAMJ,OALAvD,EAAMwD,MAAM,KAAK7N,SAAS8N,IACtB,MAAMC,EAAW,IAAIC,OAAOF,EAAM,KAClCF,EAAWlM,EAAKuM,QAAQF,EAAU,OAG/BH,EAASM,MADC,YDsBHC,CAAoBT,EAAKpD,QAAS4C,GAC1CkB,EE7BH,SAAqBT,GACxB,OAAOA,EAAMU,QAAO,CAACC,EAAKC,IACfD,EAAIE,IAAID,EAAEE,eAAgBH,EAAII,IAAIH,EAAEE,gBAAkB,GAAK,IACnE,IAAIjG,KF0BamG,CAAYhB,GAC1BiB,EAAiB,IAAOR,EAAYS,WACpCC,EAAiBF,EAAkBlH,QAAOqH,IAAE,IAAShC,EAAOiC,WAAWjC,EAAOkC,UAAU1E,GAAeyB,SAAS+C,EAAG,UACrHG,SAEFA,EADEN,EAAkBxN,OAAS,IACjB0N,EAAerI,MAAM,EAAG,KAExBqI,EAEdI,EAAUC,MAAM,CAAA/O,EAAEC,IAAMA,EAAE,GAAKD,EAAE,KAC1B8O,EAGA,SAAAE,EAAOtB,OACd/C,EAAc,IAAOA,EAAgB+C,IACrChD,EAAoBC,GACpBsE,EAAA,GAAAjE,GAAgB,GAChBD,EAAmBC,YAmBZkE,IACPD,EAAA,EAAAlC,GAAM,GACNH,EAAkBhJ,KAAI,CACpBqG,MAAO0C,EAAOxL,KACdgO,MAAOxE,EAAe3J,SD/CrB,SAAgC4L,GACnChC,EAAqB,oBAAqBC,KAAKC,UAAU8B,ICgDzDwC,CAAuBxC,wOAvDtByC,EAAoBnC,EAAcP,EAAOxL,4BAKzCmO,EAActE,EAAgB,eAAiB,kCACjDiE,EAAA,EAAEM,GAAYvE,oCA2BT6B,EAAMwB,gBAAkBvB,EAAauB,eAE9B1B,EAAOiC,QAAQhD,SAASiB,EAAMwB,eADvCa,KAQFD,EAAA,EAAAjC,GAAQ,GACRwC,iBACEP,EAAA,EAAApC,EAAQ,IACRoC,EAAA,GAAAjE,GAAgB,GAChBiE,EAAA,EAAAjC,GAAQ,KACP,sBAamDH,EAAKxD,KAAAlH,kBAYpC6M,EAAOtB,SAcNuB,EAAA,EAAAlC,GAAM,oIGtG3B,MAAM0C,GAAU,CACnB,CAAEtO,KAAM,WAAYyN,QAAS,GAAIC,OAAQ,IACzC,CAAE1N,KAAM,WAAYyN,QAAS,GAAIC,OAAQ,CAAC,MAAO,OAAQ,IAAK,IAAK,IAAK,MACxE,CAAE1N,KAAM,eAAgByN,QAAS,GAAIC,OAAQ,IAC7C,CAAE1N,KAAM,eAAgByN,QAAS,GAAIC,OAAQ,IAC7C,CAAE1N,KAAM,eAAgByN,QAAS,GAAIC,OAAQ,IAC7C,CAAE1N,KAAM,WAAYyN,QAAS,GAAIC,OAAQ,IACzC,CAAE1N,KAAM,UAAWyN,QAAS,GAAIC,OAAQ,IACxC,CAAE1N,KAAM,WAAYyN,QAAS,GAAIC,OAAQ,IACzC,CAAE1N,KAAM,UAAWyN,QAAS,CAAC,UAAWC,OAAQ,IAChD,CAAE1N,KAAM,cAAeyN,QAAS,GAAIC,OAAQ,CAAC,OAAQ,WACrD,CAAE1N,KAAM,SAAUyN,QAAS,GAAIC,OAAQ,CAAC,UAAW,WACnD,CAAE1N,KAAM,uBAAwByN,QAAS,CAAC,aAAcC,OAAQ,IAChE,CAAE1N,KAAM,QAASyN,QAAS,GAAIC,OAAQ,CAAC,QAAS,eAChD,CAAE1N,KAAM,SAAUyN,QAAS,GAAIC,OAAQ,CAAC,IAAK,MAAO,MACpD,CAAE1N,KAAM,cAAeyN,QAAS,GAAIC,OAAQ,CAAC,QAAS,IAAK,MAC3D,CAAE1N,KAAM,WAAYyN,QAAS,CAAC,aAAcC,OAAQ,CAAC,MAAO,UAC5D,CAAE1N,KAAM,UAAWyN,QAAS,GAAIC,OAAQ,CAAC,IAAK,WAAY,YAC1D,CAAE1N,KAAM,UAAWyN,QAAS,GAAIC,OAAQ,CAAC,yMCsCA,IAAjBhK,EAAiB,yBAAjBA,EAAiB,oCR4sD7C,SAAc7B,EAAW7B,EAAMkD,GAC3B,MAAM2B,EAAQhD,EAAUmB,GAAG2D,MAAM3G,QACnBiF,IAAVJ,IACAhD,EAAUmB,GAAG8D,MAAMjC,GAAS3B,EAC5BA,EAASrB,EAAUmB,GAAGU,IAAImB,sCAGlC,IAA0BV,qDAAAA,kBACbA,EAAMH,YQztDjB7E,EAAwEH,EAAAqL,EAAAjL,2ERg9B1E,IAA4BjB,oHQ38BAuF,EAAiB,GR28BjBvF,WACxBgE,EAAgBM,KAAKtE,8IQ19BlBuF,EAAiB,wBAAtB7D,OAAID,GAAA,kKAAC8D,EAAiB,WAAtB7D,OAAID,GAAA,EAAA,2HAAJC,sEAKC6D,EAAiB,GAAC7D,OAAS6D,EAAK,IAAA,yFAFhBA,EAAiB,GAACA,EAAiB,GAACA,EAAiB,GAAC7D,OAAS6D,EAAK,IAAG,GAAG1D,eAF7Fb,EAKQH,EAAAqL,EAAAjL,wJAPHsE,EAAkB,GAAA,6TA/BjB,IAAA+H,ELUKxB,EAAiB,oBAAqB,IKT3CT,ELRKS,EAAiB,iBAAkB,IKSxCJ,ELHK0E,QAAQzE,aAAaK,QAAQ,kBKIlCqE,ELaKvE,EAAiB,iBAAkBd,GKXxCsF,GAAqB,EAErBjD,GDGqBkD,ECHDF,EDItBvC,QAAQC,IAAIwC,GACLJ,GAAQI,IAFZ,IAAoBA,MCFrBC,EAAoBL,GAAQpJ,MAAM,EAAGiE,EAAc,YAGhDyF,EAAcC,EAAoBhK,GACzCiJ,EAAA,EAAAtC,EAASqD,OACTrF,EAAc,IACdsE,EAAA,EAAAjE,GAAgB,GAChBiE,EAAA,EAAAW,GAAqB,GLGhB,SAA6BD,GAChC/E,EAAqB,iBAAkB+E,EAAeM,YKHxDC,CAAoBlK,GACpB0E,EAAoBC,GACpBI,EAAmBC,GAMrBmF,OAAOJ,cAAa,SAAa/J,GAC/B+J,EAAcN,GAAQzJ,GAAQA,yBALvB,SAAkB2G,UAClBC,EAAkBwD,MAAKzB,GAAMA,EAAG1E,QAAU0C,SAalCoD,EAAcD,EAAkBA,EAAkB9O,OAASgF,EAAQ,GAAI8J,EAAkB9O,OAASgF,EAAQ,SAOlGiJ,EAAA,EAAAW,GAAqB,gBAKlBhD,EAAiBzK,kBCvDjC,kEAAQ,CAChBhC,OAAQiB,SAASiP,KACjBvI,MAAO"}